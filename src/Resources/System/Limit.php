<?php
namespace DreamFactory\Core\Limit\Resources\System;

use DreamFactory\Core\Resources\System\BaseSystemResource;
use DreamFactory\Core\Limit\Models\Limit as LimitsModel;
use DreamFactory\Library\Utility\Enums\DateTimeIntervals;
use DreamFactory\Core\Utility\ResourcesWrapper;
use DreamFactory\Core\Exceptions\BadRequestException;
use DreamFactory\Core\Models\Role;
use DreamFactory\Core\Models\User;
use DreamFactory\Core\Models\Service;
use DreamFactory\Core\Limit\Resources\System\LimitCache as Cache;

class Limit extends BaseSystemResource
{
    /**
     * @var string DreamFactory\Core\Models\BaseSystemModel Model Class name.
     */
    protected static $model = LimitsModel::class;

    protected $periods = [
        'Minute'  => DateTimeIntervals::MINUTES_PER_MINUTE,
        'Hour'    => DateTimeIntervals::MINUTES_PER_HOUR,
        'Day'     => DateTimeIntervals::MINUTES_PER_DAY,
        '7 Days'  => DateTimeIntervals::MINUTES_PER_WEEK,
        '30 Days' => DateTimeIntervals::MINUTES_PER_MONTH,
    ];

    /**
     * The limiter cache store.
     *
     * @var \Illuminate\Cache\
     */
    protected $limitCache;

    public function __construct()
    {
        $this->limitCache = new LimitCache();
    }

    /**
     * {@inheritdoc}
     */
    protected function handleGET()
    {
        $response = parent::handleGET();
        if (isset($response['resource']) && !empty($response['resource'])) {
            foreach ($response['resource'] as &$resourceLimit) {
                $resourceLimit['limit_period'] = $this->resolveLimitPeriod($resourceLimit['limit_period']);
            }
        } else {
            $response['limit_period'] = $this->resolveLimitPeriod($response['limit_period']);
        }

        return $response;
    }

    /**
     * @param $periodNbr
     *
     * @return mixed
     */
    protected function resolveLimitPeriod($periodNbr)
    {
        return LimitsModel::$limitPeriods[$periodNbr];
    }

    /**
     * {@inheritdoc}
     */
    protected function handlePOST()
    {

        try {
            $this->enrichRecordData();

            $response = parent::handlePOST();
            $returnData = $response->getContent();
            if (is_array($returnData['resource'])) {
                foreach ($returnData['resource'] as &$return) {
                    if (isset($return['limit_period'])) {
                        $return['limit_period'] = LimitsModel::$limitPeriods[$return['limit_period']];
                    }
                }
            }

            return $returnData;
        } catch (\Exception $e) {
            $message = $e->getMessage();
            if (preg_match('/Duplicate entry (.*) for key \'limit_key_hash\'/', $message)) {
                throw new BadRequestException('A limit already exists with those parameters. No records added.', 0, $e);
            }
            throw new BadRequestException('An error occurred when inserting Limits: ' . $message);
        }
    }

    /**
     * {@inheritdoc}
     */
    protected function handleDELETE()
    {
        $return = parent::handleDELETE(); // TODO: Change the autogenerated stub

        /* Fire the cache clean up event */
        if (isset($return['resource']) && !empty($return['resource'])) {
            foreach ($return['resource'] as $clearCache) {
                $this->limitCache->clearById($clearCache['id']);
            }
        }

        return $return;
    }

    /**
     * {@inheritdoc}
     */
    protected function handlePATCH()
    {
        try {
            $this->enrichRecordData();

            return parent::handlePATCH();
        } catch (\Exception $e) {
            $message = $e->getMessage();
            if (preg_match('/Duplicate entry (.*) for key \'limit_key_hash\'/', $message)) {
                throw new BadRequestException('A limit already exists with those parameters. No records added.', 0, $e);
            }
            throw new BadRequestException('An error occurred when inserting Limits: ' . $message);
        }
    }

    /**
     * Enriches record data with key and hash for DB.
     */
    protected function enrichRecordData()
    {
        $records = ResourcesWrapper::unwrapResources($this->getPayloadData());
        $limit = new static::$model;

        foreach ($records as &$record) {
            $limitPeriodNumber = array_search($record['limit_period'], LimitsModel::$limitPeriods);
            if ($this->validateLimitPayload($record)) {
                /* set the resolved limit period number */
                $record['limit_period'] = $limitPeriodNumber;
                /* check for an "each user" condition by a *, set it to null, bypassing validation */
                if (strpos($record['limit_type'], 'user') && $record['user_id'] == '*') {
                    $record['user_id'] = null;
                }
                $key =
                    $limit->resolveCheckKey($record['limit_type'], $record['user_id'], $record['role_id'],
                        $record['service_id'], $limitPeriodNumber);
                $record['limit_key_text'] = $key;

                /* limits are active by default, but in case of deactivation, set the limit inactive */
                if (isset($record['active']) && !filter_var($record['active'], FILTER_VALIDATE_BOOLEAN)) {
                    $record['active_ind'] = 0;
                }
            }
        }

        $this->request->setPayloadData(ResourcesWrapper::wrapResources($records));

        /* For bulk create, rollback the transaction if a record fails. */
        $this->request->setParameter('rollback', true);
    }

    protected function validateLimitPayload(&$record)
    {

        /* Default service id enriched value - will get set from name if exists in database in _resolveServiceName(). */
        $record['service_id'] = null;

        switch ($record['limit_type']) {
            case 'instance':
                break;

            case 'instance.user':

                if (!isset($record['user_id']) || is_null($record['user_id'])) {
                    throw new BadRequestException('user_id must be specified with this limit type. Limit: ' .
                        $record['label_text']);
                }

                if (!$this->checkUser($record['user_id']) && $record['user_id'] !== '*') {
                    throw new BadRequestException('user_id does not exist for ' . $record['label_text'] . ' limit.');
                }

                break;

            case 'instance.role':

                if (!isset($record['role_id']) || is_null($record['role_id'])) {
                    throw new BadRequestException('role_id must be specified with this limit type. Limit: ' .
                        $record['label_text']);
                }

                if (!$this->checkRole($record['role_id'])) {
                    throw new BadRequestException('No role_id exists for ' . $record['label_text'] . ' limit.');
                }

                break;

            case 'instance.user.service':

                if (!isset($record['user_id']) || is_null($record['user_id'])) {
                    throw new BadRequestException('user_id must be specified with this limit type. Limit: ' .
                        $record['label_text']);
                }

                if (!$this->checkUser($record['user_id']) && $record['user_id'] !== '*') {
                    throw new BadRequestException('No user_id exists for ' . $record['label_text'] . ' limit.');
                }

                if (!isset($record['service_name']) || is_null($record['service_name'])) {
                    throw new BadRequestException('service_name must be specified with this limit type. Limit: ' .
                        $record['label_text']);
                }

                if (!$this->resolveServiceName($record)) {
                    throw new BadRequestException('No service_name exists for ' . $record['label_text'] . ' limit.');
                }

                break;

            case 'instance.service':

                if (!isset($record['service_name']) || is_null($record['service_name'])) {
                    throw new BadRequestException('service_name must be specified with this limit type.');
                }

                if (!$this->resolveServiceName($record)) {
                    throw new BadRequestException('No service_name exists for ' . $record['label_text'] . ' limit.');
                }

                break;
        }

        return true;
    }

    protected function checkUser($id)
    {
        return User::where('id', $id)->exists();
    }

    protected function checkRole($id)
    {
        return Role::where('id', $id)->exists();
    }

    protected function resolveServiceName(&$record)
    {

        if ($service = Service::where('name', $record['service_name'])->first()) {
            $record['service_id'] = $service->id;

            return true;
        }

        return false;
    }

}