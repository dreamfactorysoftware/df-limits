<?php
namespace DreamFactory\Core\Limit\Resources\System;


use DreamFactory\Core\Resources\System\BaseSystemResource;
use DreamFactory\Core\Limit\Models\Limit as LimitsModel;
use DreamFactory\Library\Utility\Enums\DateTimeIntervals;
use DreamFactory\Core\Utility\ResourcesWrapper;
use DreamFactory\Core\Utility\ServiceRequest;
use DreamFactory\Core\Exceptions\BadRequestException;


use Log;
use ServiceManager;

class Limit extends BaseSystemResource
{
    /**
     * @var string DreamFactory\Core\Models\BaseSystemModel Model Class name.
     */
    protected static $model = LimitsModel::class;

    protected $periods = [
        'Minute'  => DateTimeIntervals::MINUTES_PER_MINUTE,
        'Hour'    => DateTimeIntervals::MINUTES_PER_HOUR,
        'Day'     => DateTimeIntervals::MINUTES_PER_DAY,
        '7 Days'  => DateTimeIntervals::MINUTES_PER_WEEK,
        '30 Days' => DateTimeIntervals::MINUTES_PER_MONTH,
    ];



    /**
     * {@inheritdoc}
     */
    protected function handlePOST()
    {

            $records = ResourcesWrapper::unwrapResources($this->getPayloadData());
            $limit = new static::$model;

            foreach($records as &$record){
                $limit_period_nbr = array_search($record['limit_period'], LimitsModel::$limitPeriods);
                if($this->validateLimitPayload($record)){
                    $key = $limit->resolveCheckKey($record['limit_type'], $record['user_id'], $record['role_id'], $record['service_name'], $limit_period_nbr);
                    $keyHash = sha1($key);
                    $record['limit_key_text'] = $key;
                    $record['limit_key_hash'] = $keyHash;
                }
            }

            $this->request->setPayloadData(ResourcesWrapper::wrapResources($records));

            /* For bulk create, rollback the transaction if a record fails. */
            $this->request->setParameter('rollback', true);

        try {
            $response = parent::handlePOST();
            return $response;

        } catch (\Exception $e){
            $message = $e->getMessage();
            if(preg_match('/Duplicate entry (.*) for key \'limit_key_hash\'/', $message)){
                throw new BadRequestException('A limit already exists with those parameters. No records added.', 0, $e);
            }
            throw new BadRequestException('An error occurred when inserting Limits.');
        }

    }

    protected function handleGET()
    {
        $response = parent::handleGET(); // TODO: Change the autogenerated stub
        foreach($response['resource'] as &$limit){
            if(isset(LimitsModel::$limitPeriods[$limit['period_nbr']])){
                $limit['limit_period'] = LimitsModel::$limitPeriods[$limit['period_nbr']];
            }
            unset($limit['period_nbr']);
        }

        return $response;


    }

    protected function validateLimitPayload($record){
        switch ($record['limit_type']) {
            case 'instance':
            case 'instance.each_user':
                break;
            case 'instance.user':
                if(!isset($record['user_id']) || is_null($record['user_id'])){
                    throw new BadRequestException('user_id must be specified with this limit type.');
                }
                break;

            case 'instance.role':
                if(!isset($record['role_id']) || is_null($record['role_id'])){
                    throw new BadRequestException('role_id must be specified with this limit type.');
                }
                break;

            case 'instance.user.service':
                if(!isset($record['user_id']) || is_null($record['user_id'])){
                    throw new BadRequestException('user_id must be specified with this limit type.');
                }
                if(!isset($record['service_name']) || is_null($record['service_name'])){
                    throw new BadRequestException('service_name must be specified with this limit type.');
                }
                break;

            case 'instance.each_user.service':
                if(!isset($record['service_name']) || is_null($record['service_name'])){
                    throw new BadRequestException('service_name must be specified with this limit type.');
                }
                break;

            case 'instance.service':
                if(!isset($record['service_name']) || is_null($record['service_name'])){
                    throw new BadRequestException('service_name must be specified with this limit type.');
                }
                break;
        }
        return true;
    }

}